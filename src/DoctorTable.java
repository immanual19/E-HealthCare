
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author emma
 */
public class DoctorTable extends javax.swing.JFrame {

    String special;
    Patient pa;
    String driver = "com.mysql.jdbc.Driver";
    String url = "jdbc:mysql://localhost:3306/db";
    String user = "root";
    String pass = "immanual";
    int availableSlots;
    int bookedSlots;
    int aSlots;
    int slts;
    int selectedDay;
    int selectedMonth;
    int selectedYear;
    int slots;
    Integer[] appointmentDate = new Integer[3];
    String apDate;
    boolean flag = true;

    /**
     * Creates new form DoctorTable
     */
    public DoctorTable() {
        initComponents();
    }

    public DoctorTable(String special, Patient pa) {
        initComponents();
        this.special = special;
        this.pa = pa;
        showDoctors();
    }

    ArrayList<Doctor> doctorList() {
        ArrayList<Doctor> doctor_List = new ArrayList<Doctor>();
        try {
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            String sql = "select *from doctors";
            ResultSet rs;
            rs = con.prepareStatement(sql).executeQuery();
            while (rs.next()) {
                int id = rs.getInt("did");
                String name = rs.getString("dname");
                String speciality = rs.getString("speciality");
                String email = rs.getString("emailid");
                String pass = rs.getString("pwd");
                String mobileno = rs.getString("mobileno");
                String chamberAddress = rs.getString("chamberAddress");
                int fees = rs.getInt("fees");
                int slots = rs.getInt("slots");
                //int availableSlots=rs.getInt("bookedSlots");
                String qualification = rs.getString("qualifications");
                String designation = rs.getString("designation");
                Doctor doct;
                if (special.equals(speciality)) {
                    doct = new Doctor(id, name, speciality, email, pass, mobileno, fees, slots, chamberAddress, designation, qualification);
                    doctor_List.add(doct);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Not working", "Alert", JOptionPane.WARNING_MESSAGE);

        }
        return doctor_List;
    }

    public void showDoctors() {
        ArrayList<Doctor> doct1 = doctorList();
        Collections.sort(doct1, new Comparator<Doctor>() {
            public int compare(Doctor d1, Doctor d2) {
                return d1.getFees() < d2.getFees() ? -1 : 1;
            }
        });

        DefaultTableModel model = (DefaultTableModel) doctor_Table.getModel();
        Object[] row = new Object[7];
        for (int i = 0; i < doct1.size(); i++) {
            row[0] = doct1.get(i).getId();
            row[1] = doct1.get(i).getName();
            row[2] = doct1.get(i).getSpeciality();
            row[3] = doct1.get(i).getSlots();
            row[4] = doct1.get(i).getPhone();
            row[5] = doct1.get(i).getChamberAddress();
            row[6] = doct1.get(i).getFees();

            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        doctor_Table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        appointeddoctorid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        diseasename = new javax.swing.JTextField();
        appointmentconfirm = new javax.swing.JButton();
        day = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        month = new javax.swing.JComboBox();
        year = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        doctor_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Speciality", "Slots", "Mobile No", "Location", "Fees", "AvailableSlots"
            }
        ));
        jScrollPane1.setViewportView(doctor_Table);

        jLabel1.setText("Doctor ID:");

        jLabel2.setText("Disease:");

        appointmentconfirm.setText("Confirm Appointment");
        appointmentconfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentconfirmActionPerformed(evt);
            }
        });

        day.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        day.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Date");

        month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthActionPerformed(evt);
            }
        });

        year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2022", "2023", "2024" }));
        year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(appointeddoctorid)
                            .addComponent(diseasename))
                        .addGap(23, 23, 23))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 31, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(appointmentconfirm)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(107, 107, 107))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(appointeddoctorid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(diseasename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(appointmentconfirm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void appointmentconfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentconfirmActionPerformed
        // TODO add your handling code here:
        if (appointmentDate[0] > 28 && appointmentDate[1] == 2) {
            flag = false;
        } else if (appointmentDate[0] > 30 && (appointmentDate[1] == 4 || appointmentDate[1] == 6 || appointmentDate[1] == 9 || appointmentDate[1] == 11)) {
            flag = false;
        } else {
            flag = true;
        }

        if (flag) {
            try {
                Class.forName(driver);
                Connection con = DriverManager.getConnection(url, user, pass);
                int doctorID=Integer.parseInt(appointeddoctorid.getText());
                String apDate = (String.valueOf(appointmentDate[0])) + '-' + (String.valueOf(appointmentDate[1])) + '-' + (String.valueOf(appointmentDate[2]));
                System.out.println(apDate);
                String sql1 = "select count(doctorID) as totalBooked from appointedDoctor where doctorID=? and appointmentDate=?";
                String sql2 = "insert into appointedDoctor(patientID,doctorID,disease,appointmentDate) values (?,?,?,?)";
                //String sql3 = "update doctors set bookedSlots=? where did=?";
                String sql4 = "select slots from doctors where did=" + Integer.parseInt(appointeddoctorid.getText());
                //String sql5="select bookedSlots from doctors where did="+Integer.parseInt(appointeddoctorid.getText());
                ResultSet rs;
                //rs = con.prepareStatement(sql1).executeQuery();
                ResultSet rs1;
                rs1 = con.prepareStatement(sql4).executeQuery();
                PreparedStatement pstm = con.prepareStatement(sql1);
                pstm.setInt(1,doctorID);
                pstm.setString(2, apDate);
                rs=pstm.executeQuery();
//         ResultSet rs2;
//         rs2=con.prepareStatement(sql5).executeQuery();
//         while(rs2.next()){
//             //booked slot of a doctor for that day
//             bookedSlots=rs2.getInt("bookedSlots");
//         }
                while (rs1.next()) {
                    //total slot for a day
                    availableSlots = rs1.getInt("slots");
                    System.out.println(availableSlots);
                }
                while (rs.next()) {
                    //total booked slots of doctor in a given date
                    slots = rs.getInt("totalBooked");
                    System.out.println(slots);
                }
                    if ((availableSlots > slots)) {
                        
                        PreparedStatement pst = con.prepareStatement(sql2);
                        //PreparedStatement pst1 = con.prepareStatement(sql3);
                        pst.setString(1, Integer.toString(pa.getId()));
                        pst.setString(2, appointeddoctorid.getText());
                        pst.setString(3, diseasename.getText());
                        pst.setString(4, apDate);
//         bookedSlots=bookedSlots+1;
//         pst1.setInt(1, bookedSlots);
//         pst1.setInt(2,Integer.parseInt(appointeddoctorid.getText()));
                        pst.executeUpdate();
                        //pst1.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Congratulation. Appointment Successful. Our specialized doctor will call you soon to give medical advice.");

                        new PatientHomeScreen(pa).setVisible(true);
                        new DoctorTable().setVisible(false);
                        dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "Sorry. No slot available for the day. Please Try again next day.");
                        new PatientHomeScreen(pa).setVisible(true);
                        new DoctorTable().setVisible(false);
                        dispose();
                    }
                

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Sorry. You have picked wrong date.");
            new PatientHomeScreen(pa).setVisible(true);
            new DoctorTable().setVisible(false);
            dispose();
        }

//        try{
//         Class.forName(driver);
//         Connection con = DriverManager.getConnection(url, user, pass);
//         String sql1="select count(doctorID) as totalSlots from appointedDoctor where doctorID="+Integer.parseInt(appointeddoctorid.getText());
//         String sql2 = "insert into appointedDoctor(patientID,doctorID,disease) values (?,?,?)";
//         String sql3 = "update doctors set bookedSlots=? where did=?";
//         String sql4="select slots from doctors where did="+Integer.parseInt(appointeddoctorid.getText());
//         String sql5="select bookedSlots from doctors where did="+Integer.parseInt(appointeddoctorid.getText());
//         ResultSet rs;
//         rs=con.prepareStatement(sql1).executeQuery();
//         ResultSet rs1;
//         rs1=con.prepareStatement(sql4).executeQuery();
//         ResultSet rs2;
//         rs2=con.prepareStatement(sql5).executeQuery();
//         while(rs2.next()){
//             bookedSlots=rs2.getInt("bookedSlots");
//         }
//         while(rs1.next()){
//             availableSlots=rs1.getInt("slots");
//         }
//         while(rs.next()){
//             int slots=rs.getInt("totalSlots");
//             
//             if(slots<availableSlots){
//         PreparedStatement pst = con.prepareStatement(sql2);
//         PreparedStatement pst1 = con.prepareStatement(sql3);
//         pst.setString(1, Integer.toString(pa.getId()));
//         pst.setString(2,appointeddoctorid.getText());
//         pst.setString(3,diseasename.getText());
//         bookedSlots=bookedSlots+1;
//         pst1.setInt(1, bookedSlots);
//         pst1.setInt(2,Integer.parseInt(appointeddoctorid.getText()));
//         pst.executeUpdate();
//         pst1.executeUpdate();
//         JOptionPane.showMessageDialog(this,"Congratulation. Appointment Successful. Our specialized doctor will call you soon to give medical advice.");
//         
//         new PatientHomeScreen(pa).setVisible(true);
//         new DoctorTable().setVisible(false);
//         dispose();
//             }
//             else{
//                 JOptionPane.showMessageDialog(this,"Sorry. No slot available for the day. Please Try again next day.");
//             }
//         }
//         
//        }catch(Exception e){
//            JOptionPane.showMessageDialog(this,e.getMessage());
//        }

    }//GEN-LAST:event_appointmentconfirmActionPerformed

    private void dayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayActionPerformed
        // TODO add your handling code here:
        selectedDay = Integer.parseInt((String) day.getSelectedItem());
        appointmentDate[0] = selectedDay;
    }//GEN-LAST:event_dayActionPerformed

    private void monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthActionPerformed
        // TODO add your handling code here:
        selectedMonth = Integer.parseInt((String) month.getSelectedItem());
        appointmentDate[1] = selectedMonth;
    }//GEN-LAST:event_monthActionPerformed

    private void yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearActionPerformed
        // TODO add your handling code here:
        selectedYear = Integer.parseInt((String) year.getSelectedItem());
        appointmentDate[2] = selectedYear;
    }//GEN-LAST:event_yearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField appointeddoctorid;
    private javax.swing.JButton appointmentconfirm;
    private javax.swing.JComboBox day;
    private javax.swing.JTextField diseasename;
    private javax.swing.JTable doctor_Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox month;
    private javax.swing.JComboBox year;
    // End of variables declaration//GEN-END:variables
}


import java.awt.Desktop;
import static java.awt.SystemColor.text;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import static javafx.scene.input.DataFormat.URL;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author emma
 */
public class PatientDashboard extends javax.swing.JFrame {

    int authId;
    /**
     * Creates new form PatientDashboard
     */
    public PatientDashboard() {
        initComponents();
        
    }

    public PatientDashboard(Patient pa) {
        initComponents();
        this.pa=pa;
        authId=pa.getId();
        showPrescriptionList();
    }
    Patient pa;
    
    
    String driver ="com.mysql.jdbc.Driver";
    String url = "jdbc:mysql://localhost:3306/db";
    String user = "root";
    String pass = "immanual";
        ArrayList<PrescriptionData> getPrescriptionList() {
        ArrayList<PrescriptionData> prescription_list=new ArrayList<PrescriptionData> ();
        try{
            
            
            Class.forName(driver);
            Connection con=DriverManager.getConnection(url,user,pass);
            String sql = "select * from PrescriptionTable where patientID = " + authId;   
            ResultSet rs;
            rs=con.prepareStatement(sql).executeQuery();
            System.out.println("My id is "+authId);
            while(rs.next())
            {
            
                int disease_id=rs.getInt("tableID");
                int patient_id=rs.getInt("patientID");
                String disease=rs.getString("disease");
                String prescriptionLink=rs.getString("prescriptionLink");
                String header=rs.getString("header");
                String summery=rs.getString("summary");
                String writtenPres=rs.getString("writtenPrescription");
                PrescriptionData prescriptionData = new PrescriptionData();
                prescriptionData.setDiseaseID(disease_id);
                prescriptionData.setDisease(disease);
                prescriptionData.setPatientID(patient_id);
                prescriptionData.setHeader(header);
                prescriptionData.setSummary(summery);
                prescriptionData.setWrittenPrescription(writtenPres);
                prescriptionData.setPrescriptionLink(prescriptionLink);
                
                prescription_list.add(prescriptionData);
                
                
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,"Not working","Alert",JOptionPane.WARNING_MESSAGE);
            
        }
        return prescription_list;
    }
       public void showPrescriptionList() {
        ArrayList<PrescriptionData> appointedList= getPrescriptionList();
     
      DefaultTableModel model = (DefaultTableModel) prescription_table.getModel();
        Object[] row = new Object[4];
        for(int i = 0;i<appointedList.size();i++)
        {
            row[0]=appointedList.get(i).getDiseaseID();
            row[1] = appointedList.get(i).getPatientID();
            row[2] = appointedList.get(i).getDisease();
            row[3] = appointedList.get(i).getPrescriptionLink();
            
            model.addRow(row);
        }  
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        prescription_table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        diseaseID = new javax.swing.JTextField();
        downloadPres = new javax.swing.JButton();
        showPrescription = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        prescription_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DiseaseID", "Patient ID", "Illness", "Prescription Link"
            }
        ));
        prescription_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prescription_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(prescription_table);

        jLabel1.setText("Disease ID");

        downloadPres.setText("DownloadPrescription");
        downloadPres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadPresActionPerformed(evt);
            }
        });

        showPrescription.setText("ShowPrescription");
        showPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPrescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(downloadPres)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(diseaseID, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(4, 4, 4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(showPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(diseaseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(showPrescription)
                .addGap(28, 28, 28)
                .addComponent(downloadPres)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prescription_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prescription_tableMouseClicked
        // TODO add your handling code here:
            JTable source = (JTable)evt.getSource();
            int row = source.rowAtPoint( evt.getPoint() );
            int column = source.columnAtPoint( evt.getPoint() );
            String s=source.getModel().getValueAt(row, column)+"";
        try {
                try {
                    Desktop.getDesktop().browse(new URL(s).toURI());
                } catch (URISyntaxException ex) {
                    Logger.getLogger(PatientDashboard.class.getName()).log(Level.SEVERE, null, ex);
                }
        } catch (IOException ex) {
            Logger.getLogger(PatientDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_prescription_tableMouseClicked

    private void downloadPresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadPresActionPerformed
        // TODO add your handling code here:
        String disID=diseaseID.getText();
        int id=Integer.parseInt(disID);  
        String SQL = "select prescription from prescriptionTable where tableID=?";

        Connection conn = null;
        java.sql.PreparedStatement smt = null;
        InputStream input = null;
        FileOutputStream output = null;
        ResultSet rs = null;

        try {

            Class.forName("com.mysql.jdbc.Driver");
            System.out.println("Connecting...");

            conn = DriverManager.getConnection(url, user, pass);
            System.out.println("Connection successful..\nNow creating query...");

            smt = conn.prepareStatement(SQL);
            smt.setInt(1,id);  //in this row we have a png picture
            rs = smt.executeQuery();

            output = new FileOutputStream(new File("/Users/emma/Desktop/NewProject/prescription.pdf"));
            System.out.println("Getting file please be patient..");

            while (rs.next()) {

                input = rs.getBinaryStream("prescription"); //get it from col name
                int r = 0;

    /*
    *there I've tried with array but nothing changed..Like this :
    * byte[] buffer = new byte[2048];
    * int r = 0;
    * while((r = input.read(buffer)) != -1){
    *        out.write(buffer,0,r);}
    */

                while ((r = input.read()) != -1) {
                    output.write(r);

                }
            }
            System.out.println("File writing complete !");

        } catch (ClassNotFoundException e) {
            System.err.println("Class not found!");
            e.printStackTrace();
        } catch (SQLException e) {
            System.err.println("Connection failed!");   
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            System.err.println("File not found!");
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println("File writing error..!");
            e.printStackTrace();
        }finally {
            if(rs != null){
                try {
                    input.close();
                    output.flush();
                    output.close();
                    smt.close();
                    conn.close();
                } catch (SQLException e) {
                    System.err.println("Connot close connecton!");
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

            }
        }
    }//GEN-LAST:event_downloadPresActionPerformed

    private void showPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPrescriptionActionPerformed
        // TODO add your handling code here:
        try{
             String disID=diseaseID.getText();
            int id=Integer.parseInt(disID);  
            Class.forName(driver);
            Connection con = DriverManager.getConnection(url, user, pass);
            String sql = "select * from prescriptionTable where tableID="+id;
            ResultSet rs;
            rs=con.prepareStatement(sql).executeQuery();
            while(rs.next()){
                int disease_id=rs.getInt("tableID");
                int patient_id=rs.getInt("patientID");
                String disease=rs.getString("disease");
                String writtenPres=rs.getString("writtenPrescription");
                String header=rs.getString("header");
                String summery=rs.getString("summary");
                PrescriptionData prescriptionData = new PrescriptionData();
                prescriptionData.setDiseaseID(disease_id);
                prescriptionData.setDisease(disease);
                prescriptionData.setPatientID(patient_id);
                prescriptionData.setWrittenPrescription(writtenPres);
                prescriptionData.setHeader(header);
                prescriptionData.setSummary(summery);
                new MyPrescription(prescriptionData).setVisible(true);
            }
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }//GEN-LAST:event_showPrescriptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientDashboard().setVisible(true);
            }
        });
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField diseaseID;
    private javax.swing.JButton downloadPres;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable prescription_table;
    private javax.swing.JButton showPrescription;
    // End of variables declaration//GEN-END:variables
}
